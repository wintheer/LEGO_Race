import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.TextField;
import java.awt.event.*;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JLabel;
import lejos.pc.comm.*;

import java.io.*;

public class PCLinefollower extends JFrame implements ActionListener
{
	
	
	   private TextField nameField = new TextField(12);
	   private TextField addressField = new TextField(20);
	   
	   private TextField kp = new TextField(10);
	   private TextField ki = new TextField(10);
	   private TextField kd = new TextField(10);
	   private TextField tp = new TextField(10);
	   private TextField turnRightTime = new TextField(10);
	   private TextField turnLeftTime = new TextField(10);
	   private TextField turnAroundTime = new TextField(10);
	   private TextField turnRightTimeDown = new TextField(10);
	   private TextField turnLeftTimeDown = new TextField(10);

	   private TextField fartNed = new TextField(10);
	   private TextField tætPå = new TextField(10);

	   
	   private String name = "TrumpBot"; 
	   private String address = "0016530A1C88";
	   
	   private NXTComm nxtComm;
	   private NXTInfo nxtInfo;
	   private InputStream is;
	   private OutputStream os;
	   private DataInputStream dis;
	   private DataOutputStream dos;
	   
	   private JButton connectButton = new JButton("Connect");   
	   private JButton goButton = new JButton("Go");
	private Object p4;


	   /**
	    * Constructor builds GUI
	    */
	   public PCLinefollower() 
	   {		
	      setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	      setTitle("Control NXT");
	      setSize(500,300);
	      
	      // holds labels and text fields
	      JPanel p1 = new JPanel();  
	      p1.add(new JLabel("Name:"));
	      p1.add(nameField);
	      nameField.setText(name);
	      p1.add(new JLabel("Address:"));
	      p1.add(addressField);
	      addressField.setText(address);
	      	     
	      try
	      {
	         nxtComm = NXTCommFactory.createNXTComm(NXTCommFactory.BLUETOOTH);
	      }
	      catch (NXTCommException nce) {
	      }
	      nxtInfo = new NXTInfo();
	     
	      // holds connect button
	      JPanel p2 = new JPanel();
	      p2.add(connectButton);
	      connectButton.addActionListener(this);
	      
	      JPanel p3 = new JPanel();  
	      p3.add(new JLabel("kp:"));
	      p3.add(kp);
	      kp.setText("0.9");
	      p3.add(new JLabel("ki:"));
	      p3.add(ki);
	      ki.setText("0.001");
	      p3.add(new JLabel("kd:"));
	      p3.add(kd);
	      kd.setText("1.6");
	      p3.add(new JLabel("tp:"));
	      p3.add(tp);
	      tp.setText("75");
	      
	      
	      JPanel p4 = new JPanel();
	      p4.add(new JLabel("turn right"));
	      p4.add(turnRightTime);
	      turnRightTime.setText("1340");
	      p4.add(new JLabel("turn left"));
	      p4.add(turnLeftTime);
	      turnLeftTime.setText("1500");
	      p4.add(new JLabel("turn around"));
	      p4.add(turnAroundTime);
	      turnAroundTime.setText("920");
	      
	      p4.add(new JLabel("turn right down"));
	      p4.add(turnRightTimeDown);
	      turnRightTimeDown.setText("1340");
	      p4.add(new JLabel("turn left down"));
	      p4.add(turnLeftTimeDown);
	      turnLeftTimeDown.setText("1500");
	      
	      JPanel p5 = new JPanel();
	      p5.add(new JLabel("fart ned"));
	      p5.add(fartNed);
	      fartNed.setText("69");
	      p5.add(new JLabel("tæt på"));
	      p5.add(tætPå);
	      tætPå.setText("16");
	      
	      
	      
	      
	      
	      // holds go button
	      JPanel p6 = new JPanel();
	      p6.add(goButton);
	      goButton.addActionListener(this);
	      
	    
	      
	      // North area of the frame
	      JPanel panel = new JPanel();  
	      panel.setLayout(new GridLayout(6,1));
	      panel.add(p1);
	      panel.add(p2);
	      panel.add(p3);
	      panel.add(p4);
	      panel.add(p5);
	      panel.add(p6);
	      
	      add(panel,BorderLayout.NORTH);

	   }
	   /**
	    * Required by action listener; 
	    * only action is generated by the get Length button
	    */	
	   public void actionPerformed(ActionEvent e)
	   {
	      if(e.getSource()== connectButton)
	      {
	         String name = nameField.getText();
	         String address = addressField.getText();
	         nxtInfo.name = name;
	         nxtInfo.deviceAddress = address;
	         try
	         {
	            nxtComm.open(nxtInfo);
	            is = nxtComm.getInputStream();
	            os = nxtComm.getOutputStream();
	      	    dis = new DataInputStream(is);
	      	    dos = new DataOutputStream(os);
	         }
	         catch (Exception ex) {
	         }
	      }	  
		   
	      if(e.getSource()== goButton)
	      {
	    	 try
	         {
	    		
		        
	            String kpString = kp.getText();
	    	    float kp = new Float(kpString).floatValue();        
	            dos.writeFloat(kp);
	            dos.flush();
	            
	    	    String kiString = ki.getText();
	    	    float ki = new Float(kiString).floatValue();        
	            dos.writeFloat(ki);
	            dos.flush();
	            
	            String kdString = kd.getText();
	    	    float kd = new Float(kdString).floatValue();        
	            dos.writeFloat(kd);
	            dos.flush();
	            
	            String tpString = tp.getText();
	    	    int tp = new Float(tpString).intValue();        
	            dos.writeInt(tp);
	            dos.flush();
	            
	            String turnrightString = turnRightTime.getText();
	    	    int turnRight = new Float(turnrightString).intValue();        
	            dos.writeInt(turnRight);
	            dos.flush();
	            String turnleftString = turnLeftTime.getText();
	    	    int turnLeft = new Float(turnleftString).intValue();        
	            dos.writeInt(turnLeft);
	            dos.flush();
	            String turnString = turnAroundTime.getText();
	    	    int turn = new Float(turnString).intValue();        
	            dos.writeInt(turn);
	            dos.flush();
	            String turnrightStringDown = turnRightTimeDown.getText();
	    	    int turnRightDown = new Float(turnrightStringDown).intValue();        
	            dos.writeInt(turnRightDown);
	            dos.flush();
	            String turnleftStringDown = turnLeftTimeDown.getText();
	    	    int turnLeftDown = new Float(turnleftStringDown).intValue();        
	            dos.writeInt(turnLeftDown);
	            dos.flush();
	            
	            String fartNedString = fartNed.getText();
	    	    int fartNed = new Float(fartNedString).intValue();        
	            dos.writeInt(fartNed);
	            dos.flush();
	            String tætPåString = tætPå.getText();
	    	    int tætPå = new Float(tætPåString).intValue();        
	            dos.writeInt(tætPå);
	            dos.flush();
	            
	            
	            dos.writeInt(1234);
	            dos.flush();
	            
	         }
	         catch (Exception ex) {
	         }           
	      }
	   }
	   
	   /**
	    * Initialize the display Frame
	    */		
	   public static void main(String[] args)
	   {
	      PCLinefollower frame = new PCLinefollower();
	      frame.setVisible(true);
	   }
	}